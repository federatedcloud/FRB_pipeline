from method import *

# Map file types to their corresponding extensions.
file_extensions = {'psrfits':'.fits','filterbank':'.fil'}

def main(hotpotato):
    
    working_dir = get_value(hotpotato,'working_dir')
    basename = get_value(hotpotato,'basename')
    rfimask_dir = get_value(hotpotato,'rfi_dir')
    
    # Location and name of .birds file if present.
    birds_flag = int(get_value(hotpotato,'birds_flag'))
    birds_basename = get_value(hotpotato,'birds_basename')
    birds_dir = get_value(hotpotato,'birds_dir')
    # Create birds_dir if non-existent.
    if not os.path.exists(birds_dir):
        os.makedirs(birds_dir)
    
    # TODO: Add to an error.py
    os.chdir(birds_dir)
    if (birds_flag==1):
        if (os.path.isfile(birds_dir+'/'+birds_basename+'.birds')):
            print('Specified .birds file found.')
            try_cmd('cp %s/%s_rfifind.inf %s.inf'% (rfimask_dir, basename, birds_basename))
            try_cmd('makezaplist.py %s.birds'% (birds_basename))
            print('Zaplist successfully created.')
            os.chdir(working_dir)
        else:
            os.chdir(working_dir)
            sys.exit('Specified .birds file not found. Please verify basename of existing .birds file.')
    else:
        # Construct glob string for parsing data files.
        data_dir = get_value(hotpotato,'directory')
        file_type = get_value(hotpotato,'filetype')
        file_ext = file_extensions[file_type]
        data_glob_string = data_dir+'/'+basename+'*'+file_ext
        # Path and name of mask generated by rfifind.
        rfimask = rfimask_dir+'/'+basename+'_rfifind.mask'
        # numout for FFT
        numout = get_value(hotpotato,'numout')
        
        # Dedisperse the data at DM = 0.0 to identify RFI.
        prepdata_DM0_basename = basename+'_topo_DM0.00'
        print('Generating DM = 0 pc/cc timeseries.')
        cmd_prepdata = 'prepdata -nobary -o %s -dm 0.0 -mask %s -numout %s -%s %s'% (prepdata_DM0_basename, rfimask, numout, file_type, data_glob_string)
        try_cmd(cmd_prepdata)
        print('Done.')
        
        # Perform FFT of DM = 0 time series produced by prepdata.
        print('Computing FFT of DM = 0 pc/cc time series.')
        try_cmd('realfft %s.dat'% (prepdata_DM0_basename))
        print('FFT computed.')
        
        # Find periodic interference at DM = 0.
        print('Tricking accelsearch into finding periodic interference at DM = 0 pc/cc')
        try_cmd('accelsearch -zmax 0 -numharm 16 %s.dat'% (prepdata_DM0_basename))
        print('Accelsearch complete.')
        
        os.chdir(working_dir)
        sys.exit('Please make a .birds file for proceeding ahead.')
    
    return hotpotato
